Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\java\com\example\ecommerce\EcommerceApplication.java
package com.example.ecommerce; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class EcommerceApplication  {  public static void main(String[] args)   {  SpringApplication.run(EcommerceApplication.class, args);  } } 
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\java\com\example\ecommerce\ResourceWebConfiguration.java
package com.example.ecommerce; import org.springframework.context.annotation.Configuration; import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry; import org.springframework.web.servlet.config.annotation.WebMvcConfigurer; @Configuration public class ResourceWebConfiguration implements WebMvcConfigurer {  @Override  public void addResourceHandlers(ResourceHandlerRegistry registry)   {  registry.addResourceHandler("/images/**").addResourceLocations("file:images/");  } } 
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\java\com\example\ecommerce\controller\AdminController.java
package com.example.ecommerce.controller; import javax.servlet.http.HttpSession; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.RequestMapping; import com.example.ecommerce.service.ICompraService; import com.example.ecommerce.service.IProductoService; import com.example.ecommerce.service.IUsuarioService; @Controller @RequestMapping("/admin") public class AdminController  {  @Autowired  private IProductoService productoService;  @Autowired  private IUsuarioService usuarioService;  @Autowired  private ICompraService compraService;    // Atributos globales  @ModelAttribute("mainAttributes")  public void mainAttributes(Model model, HttpSession session)  {  Object usuario_id = session.getAttribute("usuario.id");  Object usuario_tipo = session.getAttribute("usuario.tipo");  Boolean isLoggedIn = (usuario_id == null) ? (false) : (!usuario_id.toString().equals("0"));  Boolean isAdmin = (usuario_tipo == null) ? (false) : (usuario_tipo.toString().equals("ADMIN"));  model.addAttribute("isLoggedIn", isLoggedIn);  model.addAttribute("isAdmin", isAdmin);  }      // Muestra todos los productos  @GetMapping(value = {"", "/"})  public String index(Model model)   {  model.addAttribute("productos", productoService.all());  return "admin/index";  }  // Muestra todos los usuarios  @GetMapping("/usuarios")  public String usuarios(Model model)  {  model.addAttribute("usuarios", usuarioService.all());  return "admin/usuarios";  }  // Muestra todas las ordenes  @GetMapping("/compras")  public String ordenes(Model model)  {  model.addAttribute("compras", compraService.all());  return "admin/compras";  } } 
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\java\com\example\ecommerce\controller\AuthController.java
package com.example.ecommerce.controller; import com.example.ecommerce.model.Usuario; import com.example.ecommerce.service.IUsuarioService; import java.util.Optional; import javax.servlet.http.HttpSession; import javax.validation.Valid; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.validation.BindingResult; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.servlet.mvc.support.RedirectAttributes; @Controller public class AuthController  {  @Autowired  private IUsuarioService usuarioService;  BCryptPasswordEncoder passEncode = new BCryptPasswordEncoder();      // Registro  @GetMapping("/signup")  public String signup(Model model)  {  model.addAttribute("usuario", new Usuario());  return "public/signup";  }  @PostMapping("/signup")  public String signup_POST(@Valid Usuario usuario, BindingResult result, RedirectAttributes redirect, Model model)  {  // Verificar si el email ya está registrado  Optional<Usuario> checkEmail = usuarioService.findByEmail(usuario.getEmail());  if(checkEmail.isPresent()) // Email ya registrado  {  model.addAttribute("error_emailExists", 1);  return "public/signup";  }  // Verificar errores de formulario  if(result.hasErrors())  {  return "public/signup";  }  // Registro correcto  usuario.setTipo("USER"); // Rol "USER" por default  usuario.setPassword(passEncode.encode(usuario.getPassword())); // Hashear contraseña  //usuarioService.save(usuario);  redirect.addFlashAttribute("signupRedirect_email", usuario.getEmail());  return "redirect:/login";  }    // Sesión  @GetMapping("/login")  public String login()  {  return "public/login";  }  @GetMapping("/login_success") // Ruta cuando el usuario inicia sesión exitosamente  public String login_success(HttpSession session)   {  String email = session.getAttribute("login_email").toString(); // Extraer el email que usó el usuario para iniciar sesión  Usuario auth = usuarioService.findByEmail(email).get(); // Buscar los datos de este email  //  session.setAttribute("usuario.id", auth.getId());  session.setAttribute("usuario.tipo", auth.getTipo());  session.removeAttribute("login_email"); // Eliminar este atributo de la sesión (ya no se usa)  return "redirect:/";  }  @GetMapping("/logout")  public String logout(HttpSession session)  {  session.removeAttribute("usuario.id"); // Eliminar datos de sesión  session.removeAttribute("usuario.tipo");  return "redirect:/";  } } 
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\java\com\example\ecommerce\controller\MercadoPagoController.java
package com.example.ecommerce.controller; import com.example.ecommerce.model.Carrito; import com.example.ecommerce.service.MercadoPagoService; import com.mercadopago.resources.Preference; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.servlet.ModelAndView; @Controller @RequestMapping("/payment") public class MercadoPagoController {  private final MercadoPagoService mercadoPagoService;  @Autowired  public MercadoPagoController(MercadoPagoService mercadoPagoService) {  this.mercadoPagoService = mercadoPagoService;  }  @GetMapping("/create")  public ModelAndView createPreference(@ModelAttribute("carrito") Carrito carrito) {  ModelAndView modelAndView = new ModelAndView();  try {  Preference preference = mercadoPagoService.createPreference(carrito);  String preferenceId = preference.getId();  String redirectUrl = "https://www.mercadopago.com/checkout?preference_id=" + preferenceId;  modelAndView.setViewName("redirect:" + redirectUrl);  } catch (Exception e) {  modelAndView.setViewName("error");  modelAndView.addObject("errorMessage", "Error al crear la preferencia de pago");  e.printStackTrace();  }  return modelAndView;  } } 
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\java\com\example\ecommerce\controller\OrdenController.java
package com.example.ecommerce.controller; import com.mercadopago.MercadoPago; import com.mercadopago.exceptions.MPException; import com.mercadopago.resources.Preference; import org.springframework.beans.factory.annotation.Value; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; @RestController @RequestMapping("/crear-orden") public class OrdenController {  @Value("${mercadopago.access_token}")  private String accessToken;  @PostMapping  public String crearOrden() {  try {  // Configurar el token de acceso de Mercado Pago  MercadoPago.SDK.setAccessToken(accessToken);  // Crear una preferencia de pago en Mercado Pago  Preference preference = new Preference();  // Aquí puedes configurar los detalles de la preferencia, como los ítems, el monto, la URL de retorno, etc.  // Guardar la preferencia en Mercado Pago  preference.save();  // Obtener la URL de pago generada por Mercado Pago  String urlPago = preference.getInitPoint();  // Redirigir al usuario a la URL de pago  return "redirect:" + urlPago;  } catch (MPException e) {  // Manejar la excepción en caso de error en la comunicación con Mercado Pago  e.printStackTrace();  return "Error al crear la orden en Mercado Pago";  }  } } 
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\java\com\example\ecommerce\controller\ProductoController.java
package com.example.ecommerce.controller; import com.example.ecommerce.model.Producto; import com.example.ecommerce.model.Usuario; import com.example.ecommerce.service.ImageService; import com.fasterxml.jackson.core.JsonProcessingException; import java.io.IOException; import java.util.Optional; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.validation.BindingResult; import org.springframework.validation.ObjectError; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.multipart.MultipartFile; import com.example.ecommerce.service.IProductoService; import com.example.ecommerce.service.IUsuarioService; import javax.servlet.http.HttpSession; import javax.validation.Valid; @Controller @RequestMapping("/productos") public class ProductoController  {  @Autowired  private IUsuarioService usuarioService;    @Autowired  private IProductoService productoService;    @Autowired  private ImageService image;  // Atributos globales  @ModelAttribute("mainAttributes")  public void mainAttributes(Model model, HttpSession session)  {  Object usuario_id = session.getAttribute("usuario.id");  Object usuario_tipo = session.getAttribute("usuario.tipo");  Boolean isLoggedIn = (usuario_id == null) ? (false) : (!usuario_id.toString().equals("0"));  Boolean isAdmin = (usuario_tipo == null) ? (false) : (usuario_tipo.toString().equals("ADMIN"));  model.addAttribute("isLoggedIn", isLoggedIn);  model.addAttribute("isAdmin", isAdmin);  }      // Ruta principal - muestra todos los productos  @GetMapping(value = {"", "/"})   public String index(Model model)  {  model.addAttribute("productos", productoService.all());  return "productos/index";  }    // Crear producto  @GetMapping("/crear")   public String create(Model model)  {  model.addAttribute("producto", new Producto());  return "productos/crear";  }    @PostMapping("/crear")  public String create_POST(@Valid Producto producto, BindingResult result, @RequestParam("imagenFile") MultipartFile file, Model model, HttpSession session) throws IOException  {  // Verificar errores  if(file.isEmpty()) // No hay imagen del producto  {  result.addError(new ObjectError("tmp", "tmp")); // Añadir un error temporal  }  if(result.hasErrors())  {  if(file.isEmpty()) model.addAttribute("emptyImage", 1); // Añadir atributo de que no hay imagen  return "productos/crear";  }  // Crear producto  int userId = Integer.parseInt(session.getAttribute("usuario.id").toString());  Usuario usuario = usuarioService.findById(userId).get();  String imageName = image.saveImage(file);  producto.setUsuario(usuario);  producto.setImagen(imageName);  productoService.save(producto);  return "redirect:/productos";  }    // Editar producto  @GetMapping("/editar/{id}")  public String editar(@PathVariable Integer id, Model model) throws JsonProcessingException  {  Optional<Producto> tmp = productoService.findById(id);  if(!tmp.isPresent()) return "redirect:/productos/";  //  Producto producto = tmp.get();  model.addAttribute("producto", producto);  return "productos/editar";  }    @PostMapping("/editar")  public String editar_POST(@Valid Producto producto, BindingResult result, @RequestParam("imagenFile") MultipartFile file) throws IOException  {  // Verificar errores  if(result.hasErrors())  {  return "productos/editar";  }  // Editar producto  Producto tmp = productoService.findById(producto.getId()).get();  if(file.isEmpty()) // La imagen no cambia  {  producto.setImagen(tmp.getImagen());  }  else // La imagen cambia  {  if(!tmp.getImagen().equals("default.jpg")) // Eliminar la imagen anterior  {  image.deleteImage(tmp.getImagen());  }  String imageName = image.saveImage(file); // Crear la imagen nueva  producto.setImagen(imageName);  }  producto.setUsuario(tmp.getUsuario());  productoService.update(producto);  return "redirect:/productos";  }    // Eliminar un producto  @GetMapping("/eliminar/{id}")  public String eliminar(@PathVariable Integer id)  {  Producto tmp = productoService.findById(id).get();  if(!tmp.getImagen().equals("default.jpg")) // Eliminar imagen del producto si no usa la imagen default  {  image.deleteImage(tmp.getImagen());  }    productoService.delete(id);  return "redirect:/productos";  } } 
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\java\com\example\ecommerce\controller\PublicController.java
package com.example.ecommerce.controller; import com.example.ecommerce.model.Carrito; import com.example.ecommerce.model.Compra; import com.example.ecommerce.model.Producto; import com.example.ecommerce.model.Usuario; import com.example.ecommerce.service.ICarritoService; import com.example.ecommerce.service.ICompraService; import java.util.List; import java.util.Optional; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestParam; import com.example.ecommerce.service.IProductoService; import com.example.ecommerce.service.IUsuarioService; import java.util.Date; import javax.servlet.http.HttpSession; @Controller public class PublicController  {  @Autowired  private IProductoService productoService;    @Autowired  private IUsuarioService usuarioService;  @Autowired  private ICarritoService carritoService;  @Autowired  private ICompraService compraService;    // Atributos globales  @ModelAttribute("mainAttributes")  public void mainAttributes(Model model, HttpSession session)  {  Object usuario_id = session.getAttribute("usuario.id");  Object usuario_tipo = session.getAttribute("usuario.tipo");  Boolean isLoggedIn = (usuario_id == null) ? (false) : (!usuario_id.toString().equals("0"));  Boolean isAdmin = (usuario_tipo == null) ? (false) : (usuario_tipo.toString().equals("ADMIN"));  model.addAttribute("isLoggedIn", isLoggedIn);  model.addAttribute("isAdmin", isAdmin);  }    // Home page - muestra todos los productos  @GetMapping(value = {"", "/"})  public String index(Model model, HttpSession session)  {  List<Producto> productos = productoService.all();  model.addAttribute("productos", productos);   return "public/index";  }  // Busca un producto por su título  @PostMapping("/buscar")  public String buscar(@RequestParam String busqueda, Model model)  {  List<Producto> productos = productoService.search(busqueda);  model.addAttribute("productos", productos);  model.addAttribute("busqueda", busqueda);  return "public/index";  }      // Muestra los detalles de un producto específico  @GetMapping("/producto/{id}")  public String producto(@PathVariable Integer id, Model model)  {  Producto producto = productoService.findById(id).get();    model.addAttribute("producto", producto);  return "public/producto";  }    // Muestra el carrito de compras del usuario  @GetMapping("/carrito")  public String carrito(Model model, HttpSession session)  {  Integer userId = Integer.parseInt(session.getAttribute("usuario.id").toString());   Usuario usuario = usuarioService.findById(userId).get(); // Obtener usuario  List<Carrito> carrito = carritoService.findByUsuario(usuario); // Obtener el carrito de compras del usuario  // Calcular total  double total = 0.0d;  for(Carrito item: carrito)   {  total += item.getProducto().getPrecio() * item.getCantidad(); // Total = precio unitario del producto * cantidad  }  //  model.addAttribute("carrito", carrito);  model.addAttribute("total", total);  return "public/carrito";  }    @PostMapping("/carrito") // Añade un nuevo producto al carrito  public String carrito_POST(@RequestParam Integer id, @RequestParam int cantidad, Model model, HttpSession session)  {  Integer userId = Integer.parseInt(session.getAttribute("usuario.id").toString());  Usuario usuario = usuarioService.findById(userId).get();  Producto producto = productoService.findById(id).get();  // Crear una nueva instancia de carrito  Carrito carrito = new Carrito();  carrito.setUsuario(usuario);  carrito.setProducto(producto);  carrito.setCantidad(cantidad);  carritoService.save(carrito); // Agregar producto al carrito del usuario    return "redirect:/carrito";  }    // Eliminar un producto del carrito de compras del usuario  @GetMapping("/carrito-eliminar/{id}")  public String removeProductFromCart(@PathVariable Integer id, HttpSession session)  {  Integer userId = Integer.parseInt(session.getAttribute("usuario.id").toString());   Optional<Carrito> item = carritoService.isProductInCart(userId, id); // Buscar producto en el carrito del usuario  if(item.isPresent()) // Verificar si existe  {  carritoService.delete(item.get()); // Eliminar producto del carrito del usuario  }  return "redirect:/carrito";  }      // Muestra la orden de los productos a comprar  @GetMapping("/orden")  public String orden(Model model, HttpSession session)  {  int userId = Integer.parseInt(session.getAttribute("usuario.id").toString());  Usuario usuario = usuarioService.findById(userId).get();  List<Carrito> carrito = carritoService.findByUsuario(usuario); // Obtener carrito de compras del usuario  // Calcular total de la compra  double total = 0.0d;  for(Carrito item: carrito)  {  total += item.getProducto().getPrecio() * item.getCantidad(); // Total = precio unitario del producto * cantidad  }  //  model.addAttribute("usuario", usuario);  model.addAttribute("carrito", carritoService.findByUsuario(usuario));  model.addAttribute("cantidadProductos", carrito.size());  model.addAttribute("total", total);  return "public/orden";  }    @GetMapping("/guardar-orden") // Comprar productos  public String saveOrder(HttpSession session)  {  int userId = Integer.parseInt(session.getAttribute("usuario.id").toString());  Usuario usuario = usuarioService.findById(userId).get();  List<Carrito> carrito = carritoService.findByUsuario(usuario); // Obtener carrito de compras del usuario  for(Carrito item: carrito)  {  // Por cada item en el carrito crear una nueva compra  Compra compra = new Compra();  compra.setUsuario(usuario);  compra.setProducto(item.getProducto());  compra.setCantidad(item.getCantidad());  compra.setPrecio(item.getProducto().getPrecio() * item.getCantidad());  compra.setFecha(new Date());  compraService.save(compra); // Guardar datos de la compra  carritoService.delete(item); // Eliminar item del carrito  }  return "redirect:/";  }  // Muestra el historial de compras del usuario  @GetMapping("/compras")  public String compras(Model model, HttpSession session)  {  int userId = Integer.parseInt(session.getAttribute("usuario.id").toString());  Usuario usuario = usuarioService.findById(userId).get();  model.addAttribute("compras", compraService.findByUsuario(usuario));  return "public/compras";  }  // Muestra los detalles de una compra especifica  @GetMapping("/compra/{id}")  public String detalles(@PathVariable Integer id, Model model, HttpSession session)  {  // Verificar que la compra exista  Optional<Compra> opt = compraService.findById(id);  if(!opt.isPresent()) return "redirect:/"; // Si no existe, redireccionar  // Obtener datos de la compra  Compra compra = opt.get();  // Verificar si el usuario puede ver los detalles de la compra  int userId = Integer.parseInt(session.getAttribute("usuario.id").toString());  Usuario usuario = usuarioService.findById(userId).get();  if(compra.getUsuario().getId() != userId && !usuario.getTipo().equals("ADMIN")) // No es el mismo usuario y no es administrador  {  return "redirect:/";  }  model.addAttribute("compra", compra);  return "public/compra";  } } 
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\java\com\example\ecommerce\model\Carrito.java
package com.example.ecommerce.model; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.ManyToOne; import javax.persistence.Table; import javax.validation.constraints.Min; @Entity @Table(name = "carritos") public class Carrito  {  @Id  @GeneratedValue(strategy = GenerationType.IDENTITY)  private Integer id;  @ManyToOne  private Usuario usuario;  @ManyToOne  private Producto producto;    @Min(value = 1, message = "Debes agregar al menos 1 producto")  private int cantidad;  public Carrito() {  }  public Carrito(Integer id, Usuario usuario, Producto producto, int cantidad)  {  this.id = id;  this.usuario = usuario;  this.producto = producto;  this.cantidad = cantidad;  }  public void setId(Integer id) {  this.id = id;  }  public Integer getId() {  return this.id;  }  public void setUsuario(Usuario usuario) {  this.usuario = usuario;  }  public Usuario getUsuario() {  return this.usuario;  }  public void setProducto(Producto producto) {  this.producto = producto;  }  public Producto getProducto() {  return this.producto;  }  public void setCantidad(int cantidad) {  this.cantidad = cantidad;  }  public int getCantidad() {  return this.cantidad;  }  @Override  public String toString() {  return "Carrito{" + "id=" + id + ", usuario=" + usuario.getNombre() + ", producto=" + producto.getNombre() + ", cantidad=" + cantidad + '}';  } } 
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\java\com\example\ecommerce\model\Compra.java
package com.example.ecommerce.model; import java.util.Date; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.ManyToOne; import javax.persistence.Table; @Entity @Table(name = "compras") public class Compra  {  @Id  @GeneratedValue(strategy = GenerationType.IDENTITY)  private Integer id;  //  @ManyToOne  private Usuario usuario;  //  @ManyToOne  private Producto producto;  //  private int cantidad;  //  private double precio;  //  private Date fecha;    public Compra() {  }  public Compra(Integer id, Producto producto, int cantidad, double precio, Date fecha) {  this.id = id;  this.producto = producto;  this.cantidad = cantidad;  this.precio = precio;  this.fecha = fecha;  }  public Integer getId() {  return id;  }  public void setId(Integer id) {  this.id = id;  }  public Usuario getUsuario() {  return usuario;  }  public void setUsuario(Usuario usuario) {  this.usuario = usuario;  }  public Producto getProducto() {  return producto;  }  public void setProducto(Producto producto) {  this.producto = producto;  }  public int getCantidad() {  return cantidad;  }  public void setCantidad(int cantidad) {  this.cantidad = cantidad;  }  public double getPrecio() {  return precio;  }  public void setPrecio(double precio) {  this.precio = precio;  }  public Date getFecha() {  return fecha;  }  public void setFecha(Date fecha) {  this.fecha = fecha;  }  @Override  public String toString() {  return "Compra [cantidad=" + cantidad + ", fecha=" + fecha + ", id=" + id + ", precio=" + precio + ", producto="  + producto.getNombre() + ", usuario=" + usuario.getId() + "]";  } } 
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\java\com\example\ecommerce\model\Producto.java
package com.example.ecommerce.model; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.ManyToOne; import javax.persistence.Table; import javax.validation.constraints.Max; import javax.validation.constraints.Min; import javax.validation.constraints.NotBlank; import javax.validation.constraints.NotNull; import javax.validation.constraints.Size; import org.springframework.format.annotation.NumberFormat; import org.springframework.format.annotation.NumberFormat.Style; @Entity @Table(name = "productos") public class Producto  {  @Id  @GeneratedValue(strategy = GenerationType.IDENTITY)  private Integer id;  //  @Column(length = 255)  @Size(min = 16, max = 255, message = "El nombre del producto debe tener entre 16 y 255 caracteres")  private String nombre;  //  @Column(length = 2048)  @Size(min = 128, max = 2048, message = "La descripción del producto debe tener entre 128 y 2048 caracteres")  private String descripcion;  //  @Column(length = 41) // 36 caracteres por el randomUUID + extension (.jpg, .webp)  private String imagen;  //  @NotNull(message = "Debes ingresar un precio")  @NumberFormat(pattern = "#,###.##", style = Style.CURRENCY)  @Min(value = 1, message = "El precio debe ser mayor a $1")  private double precio;  //  @NotNull(message = "Debes ingresar la cantidad de stock del producto")  @Min(value = 1, message = "La cantidad de stock no debe ser menor a 1")  private int cantidad;    //  @ManyToOne  private Usuario usuario;    public Producto() {  }  public Producto(Integer id, String nombre, String descripcion, String imagen, double precio, int cantidad, Usuario usuario) {  this.id = id;  this.nombre = nombre;  this.descripcion = descripcion;  this.imagen = imagen;  this.precio = precio;  this.cantidad = cantidad;  this.usuario = usuario;  }    public Integer getId() {  return id;  }  public void setId(Integer id) {  this.id = id;  }  public String getNombre() {  return nombre;  }  public void setNombre(String nombre) {  this.nombre = nombre;  }  public String getDescripcion() {  return descripcion;  }  public void setDescripcion(String descripcion) {  this.descripcion = descripcion;  }  public String getImagen() {  return imagen;  }  public void setImagen(String imagen) {  this.imagen = imagen;  }  public double getPrecio() {  return precio;  }  public void setPrecio(double precio) {  this.precio = precio;  }  public int getCantidad() {  return cantidad;  }  public void setCantidad(int cantidad) {  this.cantidad = cantidad;  }  public Usuario getUsuario() {  return usuario;  }  public void setUsuario(Usuario usuario) {  this.usuario = usuario;  }    @Override  public String toString() {  return "Producto{" + "id=" + id + ", nombre=" + nombre + ", descripcion=" + descripcion + ", imagen=" + imagen + ", precio=" + precio + ", cantidad=" + cantidad + '}';  } } 
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\java\com\example\ecommerce\model\Usuario.java
package com.example.ecommerce.model; import java.util.List; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.OneToMany; import javax.persistence.Table; import javax.validation.constraints.Email; import javax.validation.constraints.NotBlank; import javax.validation.constraints.Size; @Entity @Table(name = "usuarios") public class Usuario  {  @Id  @GeneratedValue(strategy = GenerationType.IDENTITY)  private Integer id;  //  @Column(length = 64)  @Size(min = 3, max = 64, message = "El nombre debe contener entre 3 y 64 caracteres")  private String nombre;  //  @Column(length = 64)  @Size(min = 3, max = 64, message = "El apellido debe contener entre 3 y 64 caracteres")  private String apellido;  //  @Column(length = 64)  @Size(min = 0, max = 64, message = "El email debe contener entre 3 y 64 caracteres")  @Email(regexp = ".+[@].+[\\.].+", message = "La dirección email no es válida")  private String email;  //  @Column(length = 62) // 62 caracteres debido al hash  @NotBlank(message = "La contraseña no puede estar vacía")  private String password;  //  @Column(length = 15) // Máximo de caracteres de un número de celular  @Size(min = 0, max = 15, message = "El número de teléfono no puede superar los 15 caracteres")  private String telefono;  //  @Column(length = 255)  @Size(min = 0, max = 255, message = "La dirección no puede superar los 255 caracteres")  private String direccion;  //  private String tipo;    @OneToMany(mappedBy = "usuario")  private List<Producto> productos;    @OneToMany(mappedBy = "usuario")  private List<Carrito> carrito;  @OneToMany(mappedBy = "usuario")  private List<Compra> compras;    public Usuario() {  }  public Usuario(Integer id, String nombre, String apellido, String password, String email, String telefono, String direccion, String tipo) {  this.id = id;  this.nombre = nombre;  this.apellido = apellido;  this.password = password;  this.email = email;  this.telefono = telefono;  this.direccion = direccion;  this.tipo = tipo;  }    public Integer getId() {  return id;  }  public void setId(Integer id) {  this.id = id;  }  public String getNombre() {  return nombre;  }  public void setNombre(String nombre) {  this.nombre = nombre;  }  public String getApellido() {  return apellido;  }  public void setApellido(String apellido) {  this.apellido = apellido;  }  public String getPassword() {  return password;  }  public void setPassword(String password) {  this.password = password;  }  public String getEmail() {  return email;  }  public void setEmail(String email) {  this.email = email;  }  public String getTelefono() {  return telefono;  }  public void setTelefono(String telefono) {  this.telefono = telefono;  }  public String getDireccion() {  return direccion;  }  public void setDireccion(String direccion) {  this.direccion = direccion;  }  public String getTipo() {  return tipo;  }  public void setTipo(String tipo) {  this.tipo = tipo;  }  public List<Producto> getProductos() {  return productos;  }  public void setProductos(List<Producto> productos) {  this.productos = productos;  }    public List<Carrito> getCarrito() {  return carrito;  }  public void setCarrito(List<Carrito> carrito) {  this.carrito = carrito;  }  public List<Compra> getCompras() {  return compras;  }  public void setCompras(List<Compra> compras) {  this.compras = compras;  } } 
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\java\com\example\ecommerce\repository\CarritoRepository.java
package com.example.ecommerce.repository; import java.util.List; import java.util.Optional; import com.example.ecommerce.model.Carrito; import com.example.ecommerce.model.Usuario; import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.data.jpa.repository.Query; import org.springframework.stereotype.Repository; @Repository public interface CarritoRepository extends JpaRepository<Carrito, Integer>  {  List<Carrito> findByUsuario(Usuario usuario);  @Query(value = "SELECT * FROM carritos WHERE usuario_id = ?1 AND producto_id = ?2 LIMIT 1", nativeQuery = true)  Optional<Carrito> isProductInCart(Integer userId, Integer productId); } 
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\java\com\example\ecommerce\repository\CompraRepository.java
package com.example.ecommerce.repository; import java.util.List; import com.example.ecommerce.model.Compra; import com.example.ecommerce.model.Usuario; import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.stereotype.Repository; @Repository public interface CompraRepository extends JpaRepository<Compra, Integer> {  List<Compra> findByUsuario(Usuario usuario); } 
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\java\com\example\ecommerce\repository\ProductoRepository.java
package com.example.ecommerce.repository; import java.util.List; import com.example.ecommerce.model.Producto; import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.data.jpa.repository.Query; import org.springframework.stereotype.Repository; @Repository public interface ProductoRepository extends JpaRepository<Producto, Integer> {  @Query(value = "SELECT * FROM productos WHERE nombre LIKE %:term%", nativeQuery = true)  List<Producto> search(String term); } 
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\java\com\example\ecommerce\repository\UsuarioRepository.java
package com.example.ecommerce.repository; import com.example.ecommerce.model.Usuario; import java.util.Optional; import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.stereotype.Repository; @Repository public interface UsuarioRepository extends JpaRepository<Usuario, Integer> {  Optional<Usuario> findByEmail(String email); } 
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\java\com\example\ecommerce\security\SpringBootSecurity.java
package com.example.ecommerce.security; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; import org.springframework.security.core.userdetails.UserDetailsService; import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; @Configuration @EnableWebSecurity public class SpringBootSecurity extends WebSecurityConfigurerAdapter  {  @Autowired  private UserDetailsService userDetailService;  @Bean  public BCryptPasswordEncoder getEncoder()  {  return new BCryptPasswordEncoder();  }  @Override  protected void configure(AuthenticationManagerBuilder auth) throws Exception  {  auth.userDetailsService(userDetailService).passwordEncoder(getEncoder());  }  @Override  protected void configure(HttpSecurity http) throws Exception  {  String publicResources[] = new String[] // URLs y resources públicos para todos los usuarios  {  "/", // Home  "/app.js", // Script  "/style.css", // CSS  "/images/**", // Imagenes de productos  "/producto/**", // Vista de producto especifico  "/buscar", // Buscador de productos  "/signup"  };  http.csrf().disable()  .authorizeRequests()  .antMatchers(publicResources).permitAll() // Rutas disponibles para cualquier usuario/visitante  .antMatchers("/admin/**", "/productos/**").hasRole("ADMIN") // Rutas protegidas - solo pueden acceder quienes tengan el rol "ADMIN"  .anyRequest().authenticated() // Todas las demás rutas - disponible solo para usuarios logueados  .and()  .formLogin()  .loginPage("/login")  //.failureUrl("/login?error")  .defaultSuccessUrl("/login_success", true)  .usernameParameter("email") // El email remplaza el username  .passwordParameter("password")  .permitAll()  .and()  .logout()  .logoutUrl("/logout")  .logoutSuccessUrl("/")  ;  }  } 
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\java\com\example\ecommerce\security\UserDetailsServiceImpl.java
package com.example.ecommerce.security; import java.util.Optional; import javax.servlet.http.HttpSession; import com.example.ecommerce.model.Usuario; import com.example.ecommerce.service.IUsuarioService; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.security.core.userdetails.User; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.security.core.userdetails.UserDetailsService; import org.springframework.security.core.userdetails.UsernameNotFoundException; import org.springframework.stereotype.Service; @Service public class UserDetailsServiceImpl implements UserDetailsService {  @Autowired  private IUsuarioService usuarioService;  @Autowired  HttpSession session;  @Override  public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException   {  Optional<Usuario> optUser = usuarioService.findByEmail(username); // Buscar usuario por el email dado  if(optUser.isPresent())  {  Usuario usuario = optUser.get();  session.setAttribute("login_email", username); // Nos ayudará a identificar el email que usó el usuario para iniciar sesión    return User.builder()  .username(usuario.getEmail())  .password(usuario.getPassword())  .roles(usuario.getTipo())  .build();  }  else  {  throw new UsernameNotFoundException("Usuario no encontrado");  }  } } 
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\java\com\example\ecommerce\service\CarritoService.java

----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\java\com\example\ecommerce\service\CarritoServiceImpl.java
package com.example.ecommerce.service; import java.util.List; import java.util.Optional; import com.example.ecommerce.model.Carrito; import com.example.ecommerce.model.Usuario; import com.example.ecommerce.repository.CarritoRepository; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; @Service public class CarritoServiceImpl implements ICarritoService {  @Autowired  private CarritoRepository carritoRepository;  @Override  public List<Carrito> all() {  return carritoRepository.findAll();  }  @Override  public Optional<Carrito> findById(int id) {  return carritoRepository.findById(id);  }  @Override  public List<Carrito> findByUsuario(Usuario usuario) {  return carritoRepository.findByUsuario(usuario);  }  @Override  public Optional<Carrito> isProductInCart(Integer userId, Integer productId) {  return carritoRepository.isProductInCart(userId, productId);  }  @Override  public void save(Carrito carrito) {  carritoRepository.save(carrito);   }  @Override  public void update(Carrito carrito) {  carritoRepository.save(carrito);  }  @Override  public void delete(Carrito carrito) {  carritoRepository.delete(carrito);  } } 
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\java\com\example\ecommerce\service\CompraServiceImpl.java
package com.example.ecommerce.service; import java.util.List; import java.util.Optional; import com.example.ecommerce.model.Compra; import com.example.ecommerce.model.Usuario; import com.example.ecommerce.repository.CompraRepository; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; @Service public class CompraServiceImpl implements ICompraService {  @Autowired  private CompraRepository compraRepository;  @Override  public List<Compra> all() {  return compraRepository.findAll();  }  @Override  public Optional<Compra> findById(Integer id) {  return compraRepository.findById(id);  }  @Override  public List<Compra> findByUsuario(Usuario usuario) {  return compraRepository.findByUsuario(usuario);  }  @Override  public void save(Compra compra) {  compraRepository.save(compra);  }  @Override  public void update(Compra compra) {  compraRepository.save(compra);  }    @Override  public void delete(Compra compra) {  compraRepository.delete(compra);  } } 
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\java\com\example\ecommerce\service\ICarritoService.java
package com.example.ecommerce.service; import java.util.List; import java.util.Optional; import com.example.ecommerce.model.Carrito; import com.example.ecommerce.model.Usuario; public interface ICarritoService  {  List<Carrito> all();  Optional<Carrito> findById(int id);  List<Carrito> findByUsuario(Usuario usuario);  Optional<Carrito> isProductInCart(Integer userId, Integer productId);  void save(Carrito carrito);  void update(Carrito carrito);  void delete(Carrito carrito); } 
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\java\com\example\ecommerce\service\ICompraService.java
package com.example.ecommerce.service; import java.util.List; import java.util.Optional; import com.example.ecommerce.model.Compra; import com.example.ecommerce.model.Usuario; public interface ICompraService  {  List<Compra> all();  Optional<Compra> findById(Integer id);  List<Compra> findByUsuario(Usuario usuario);  void save(Compra compra);  void update(Compra compra);  void delete(Compra compra); } 
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\java\com\example\ecommerce\service\ImageService.java
package com.example.ecommerce.service; import java.io.File; import java.io.IOException; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import java.util.Optional; import java.util.UUID; import org.springframework.stereotype.Service; import org.springframework.web.multipart.MultipartFile; @Service public class ImageService  {  private final String folder = "images//";    public String saveImage(MultipartFile file) throws IOException  {  if(!file.isEmpty())  {  // Generar nombre de imagen  final String ext = getFileExtension(file.getOriginalFilename()).get(); // Extraemos la extensión de la imagen  final String filename = UUID.randomUUID().toString() + "." + ext; // Creamos un string unico + extension  // Guardar imagen en los assets  byte[] bytes = file.getBytes();  Path path = Paths.get(folder + filename);  Files.write(path, bytes);  return filename;  }  return "default.jpg";  }    public void deleteImage(String name)  {  File file = new File(folder + name);  file.delete();  }  public Optional<String> getFileExtension(String filename)   {  return Optional.ofNullable(filename)  .filter(f -> f.contains("."))  .map(f -> f.substring(filename.lastIndexOf(".") + 1));  } } 
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\java\com\example\ecommerce\service\IProductoService.java
package com.example.ecommerce.service; import com.example.ecommerce.model.Producto; import java.util.List; import java.util.Optional; public interface IProductoService  {  List<Producto> all();  Optional<Producto> findById(int id);  List<Producto> search(String term);    void save(Producto producto);  void update(Producto producto);  void delete(int id); } 
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\java\com\example\ecommerce\service\IUsuarioService.java
package com.example.ecommerce.service; import com.example.ecommerce.model.Usuario; import java.util.List; import java.util.Optional; public interface IUsuarioService  {  List<Usuario> all();  Optional<Usuario> findById(int id);  Optional<Usuario> findByEmail(String email);    Usuario save(Usuario usuario);  void update(Usuario usuario);  void delete(int id); } 
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\java\com\example\ecommerce\service\MercadoPagoService.java
package com.example.ecommerce.service; import com.example.ecommerce.model.Carrito; import com.mercadopago.exceptions.MPException; import com.mercadopago.resources.Preference; import com.mercadopago.resources.datastructures.preference.Item; import com.mercadopago.resources.datastructures.preference.Payer; import org.springframework.beans.factory.annotation.Value; import org.springframework.stereotype.Service; @Service public class MercadoPagoService {  public Preference createPreference(Carrito carrito) throws MPException {  // Crear una instancia de Preference de Mercado Pago  Preference preference = new Preference();  // Agregar los datos de la orden de compra  preference.setExternalReference(String.valueOf(carrito.getId()));  preference.setPayer(new Payer().setName(carrito.getUsuario().getNombre()));  preference.appendItem(new Item()  .setTitle(carrito.getProducto().getNombre())  .setQuantity(carrito.getCantidad())  .setUnitPrice((float) carrito.getProducto().getPrecio())  );  // Realizar cualquier otra configuración necesaria en la preferencia  // Guardar la preferencia en Mercado Pago y obtener el ID de preferencia generado  preference.save();  return preference;  }  @Value("${mercadoPago.publicKey}")  private String publicKey;  @Value("${mercadoPago.accessToken}")  private String accessToken;  // Otras operaciones relacionadas con Mercado Pago } 
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\java\com\example\ecommerce\service\ProductoServiceImpl.java
package com.example.ecommerce.service; import com.example.ecommerce.model.Producto; import com.example.ecommerce.repository.ProductoRepository; import java.util.List; import java.util.Optional; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; @Service public class ProductoServiceImpl implements IProductoService {  @Autowired  private ProductoRepository productoRepository;    @Override  public List<Producto> all() {  return productoRepository.findAll();  }  @Override  public Optional<Producto> findById(int id) {  return productoRepository.findById(id);  }  @Override  public List<Producto> search(String term) {  return productoRepository.search(term);  }  @Override  public void save(Producto producto) {  productoRepository.save(producto);  }  @Override  public void update(Producto producto) {  productoRepository.save(producto);  }  @Override  public void delete(int id) {  productoRepository.deleteById(id);  } } 
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\java\com\example\ecommerce\service\UsuarioServiceImpl.java
package com.example.ecommerce.service; import com.example.ecommerce.model.Usuario; import com.example.ecommerce.repository.UsuarioRepository; import java.util.List; import java.util.Optional; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; @Service public class UsuarioServiceImpl implements IUsuarioService {  @Autowired  private UsuarioRepository usuarioRepository;      @Override  public List<Usuario> all() {  return usuarioRepository.findAll();  }  @Override  public Optional<Usuario> findById(int id) {  return usuarioRepository.findById(id);  }    @Override  public Optional<Usuario> findByEmail(String email) {  return usuarioRepository.findByEmail(email);  }  @Override  public Usuario save(Usuario usuario) {  usuarioRepository.save(usuario);  return usuario;  }  @Override  public void update(Usuario usuario) {  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.  }  @Override  public void delete(int id) {  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.  } } 
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\resources\static\app.js
const productsTable=document.querySelector("table#products-table");document.addEventListener("DOMContentLoaded",()=>{if(productsTable) {productsTable.addEventListener("click",productsTableHandler);}});function productsTableHandler(e) {if(e.target.id==="btn-delete-product") {if(confirm("¿Estás seguro que quieres eliminar este producto? Esta acción es irreversible!"))return 1;else e.preventDefault();}}
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\resources\templates\layout.html
<div th:fragment=header> <!DOCTYPE html><html lang=es xmlns:th=http://www.thymeleaf.org> <head><title>E-commerce - Java Spring</title><meta charset=UTF-8><meta name=viewport content="width=device-width, initial-scale=1.0"><!-- CSS --><link href=https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css rel=stylesheet integrity=sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3 crossorigin=anonymous><link rel=stylesheet href=/style.css></head> <body> <header class="bg-dark py-3"> <div class="container d-flex align-items-center justify-content-between gap-4"> <div class="d-flex align-items-center gap-2"> <a th:href=@{/} class="fs-2 navbar-brand text-white">Spring eCommerce</a> <form th:action=@{/buscar} method=POST class="d-flex gap-1 my-2"> <input type=text class="form-control w-auto" placeholder=Buscar name=busqueda autocomplete=off required> <button type=submit class="btn btn-primary">Buscar</button> </form> </div> <!-- LoggedIn user --> <div th:if=${isLoggedIn}> <nav class="d-flex align-items-center gap-3"> <a th:href=@{/compras} class="flex-grow-1 text-decoration-none text-light">Compras</a> <a th:href=@{/carrito} class="flex-grow-1 text-decoration-none text-light">Ver Carrito</a> <a th:href=@{/logout} class="flex-grow-1 text-decoration-none text-light">Cerrar sesión</a> <!-- Admin user --> <div th:if=${isAdmin} class="dropdown flex-grow-1"> <button class="btn btn-secondary dropdown-toggle" type=button id=dropdownAdminNav data-bs-toggle=dropdown aria-expanded=false> Admin </button> <ul class=dropdown-menu aria-labelledby=dropdownAdminNav> <li><a th:href=@{/productos/} class=dropdown-item>Productos</a></li> <li><a th:href=@{/admin/usuarios} class=dropdown-item>Usuarios</a></li> <li><a th:href=@{/admin/compras} class=dropdown-item>Compras</a></li> </ul> </div> </nav> </div> <!-- Not logged in user --> <div th:unless=${isLoggedIn}> <nav class="d-flex align-items-center gap-2"> <a th:href=@{/login} class="btn btn-outline-light">Iniciar sesión</a> <a th:href=@{/signup} class="btn btn-outline-success">Crear cuenta</a> </nav> </div> </div> </header> </div> <!-- Content --> <div th:fragment=footer> <footer class="mt-5 py-4 bg-dark text-white"> <div class=container> <p class="m-0 text-center">Copyright &COPY; Spring eCommerce 2022</p> </div> </footer> <script src=https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js integrity=sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p crossorigin=anonymous></script> <script src=/app.js></script> </body> </html> </div> 
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\resources\templates\admin\compras.html
<div th:include=layout::header> </div> <!-- content --> <main class=container> <h3 class=mt-4>Compras</h3> <div class="card my-4"> <div class=card-body> <div th:if=${compras.isEmpty()} class=text-center> <p class=my-3>Aún no se han realizado compras</p> </div> <table th:unless=${compras.isEmpty()} class=table id=products-table> <thead> <tr> <th>Fecha</th> <th>Comprador</th> <th>Producto</th> <th>Cantidad</th> <th>Total</th> <th> </th> </tr> </thead> <tbody> <tr th:each="compra: ${compras}"> <td th:text="${#dates.format(compra.fecha, 'dd/MM/yyyy')}"></td> <td th:text="${compra.usuario.nombre} + ' ' + ${compra.usuario.apellido}"></td> <td th:text=${compra.producto.nombre}></td> <td th:text=${compra.cantidad}></td> <td th:text="'$ ' + ${#numbers.formatDecimal(compra.precio, 0, 'DEFAULT', 0, 'POINT')}"></td> <td> <a th:href="@{/compra/{id} (id = ${compra.id})}" class="btn btn-primary">Ver detalles</a> </td> </tr> </tbody> </table> </div> </div> </main> <!-- content/ --> <div th:include=layout::footer> </div>
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\resources\templates\admin\index.html
<div th:include=layout::header> </div> <!-- content --> <main class=container> <div class="my-4 p-5 bg-light rounded-3"> <h1 class="display-5 fw-bold">Bienvenidos a Spring e-Commerce</h1> <p class="col-md-8 fs-4">Tu tienda de productos en línea</p> </div> </main> <section class=container> <div class=row> <div th:each="producto: ${productos}" class="col-lg-3 col-md-6 mb-4"> <a class="card h-100 text-decoration-none text-black" th:href=@{/productos/}> <img th:src="@{/images/{img} (img = ${producto.imagen})}" class=card-img-top alt=producto> <div class=card-body> <p class=card-text th:text=${producto.descripcion}></p> </div> </a> </div> </div> </section> <!-- content/ --> <div th:include=layout::footer> </div>
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\resources\templates\admin\usuarios.html
<div th:include=layout::header> </div> <!-- content --> <main class=container> <h3 class=mt-4>Usuarios</h3> <div class="card my-4"> <div class=card-body> <table class=table> <thead> <tr> <th>Nombre y apellido</th> <th>Email</th> <th>Dirección</th> </tr> </thead> <tbody> <tr th:each="usuario: ${usuarios}"> <td th:text=${usuario.nombre}></td> <td th:text=${usuario.email}></td> <td th:text=${usuario.direccion}></td> <!-- <td th:text="'$ ' + ${#numbers.formatDecimal(usuario.total, 0, 'DEFAULT', 0, 'POINT')}"></td>  <td>  <a th:href="@{/detalles/{id} (id = ${usuario.id})}" class="btn btn-primary">Ver detalles</a>  </td> --> </tr> </tbody> </table> </div> </div> </main> <!-- content/ --> <div th:include=layout::footer> </div>
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\resources\templates\productos\crear.html
<div th:include=layout::header> </div> <!-- content --> <main class=container> <h1 class=my-4>Crear Producto</h1> <p class="mt-4 text-muted">* Todos los campos son obligatorios</p> <form th:action=@{/productos/crear} th:object=${producto} method=POST enctype=multipart/form-data> <div class=mb-3> <label class=form-label for=nombre>Nombre</label> <input class=form-control id=nombre th:field=*{nombre} type=text placeholder="Nombre del producto" required> <small class="form-text text-danger" th:errors=*{nombre}></small> </div> <div class=mb-3> <label class=form-label for=descripcion>Descripción</label> <textarea class=form-control id=descripcion th:field=*{descripcion} rows=5 required></textarea> <small class="form-text text-danger" th:errors=*{descripcion}></small> </div> <div class=mb-3> <label class=form-label for=cantidad>Cantidad</label> <input class=form-control id=cantidad th:field=*{cantidad} type=number placeholder=1 required> <small class="form-text text-danger" th:errors=*{cantidad}></small> </div> <div class=mb-3> <label class=form-label for=precio>Precio</label> <div class=input-group> <span class=input-group-text>$</span> <input class=form-control id=precio th:field=*{precio} type=number value=1 required> </div> <small class="form-text text-danger" th:errors=*{precio}></small> </div> <div class=mb-3> <label for=imagen class=form-label>Imagen</label> <input type=file class=form-control id=imagen name=imagenFile required> <small th:if=${emptyImage} class="form-text text-danger">Debes incluir una imagen del producto</small> </div> <button type=submit class="btn btn-primary">Guardar</button> <a class="btn btn-outline-secondary" th:href=@{/productos}>Volver</a> </form> </main> <!-- content/ --> <div th:include=layout::footer> </div>
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\resources\templates\productos\editar.html
<div th:include=layout::header> </div> <!-- content --> <main class=container> <h1 class=my-4>Editar Producto</h1> <form th:action=@{/productos/editar} th:object=${producto} method=POST enctype=multipart/form-data> <input type=hidden th:field=*{id}> <div class=mb-3> <label class=form-label for=nombre>Nombre</label> <input class=form-control id=nombre th:field=*{nombre} type=text placeholder="Nombre del producto" required> <small class="form-text text-danger" th:errors=*{nombre}></small> </div> <div class=mb-3> <label class=form-label for=descripcion>Descripción</label> <textarea class=form-control id=descripcion th:field=*{descripcion} rows=5 required></textarea> <small class="form-text text-danger" th:errors=*{descripcion}></small> </div> <div class=mb-3> <label class=form-label for=cantidad>Cantidad</label> <input class=form-control id=cantidad th:field=*{cantidad} type=number placeholder=1 required> <small class="form-text text-danger" th:errors=*{cantidad}></small> </div> <div class=mb-3> <label class=form-label for=precio>Precio</label> <div class=input-group> <span class=input-group-text>$</span> <input class=form-control id=precio th:field=*{precio} type=number value=1 required> </div> <small class="form-text text-danger" th:errors=*{precio}></small> </div> <div class=mb-3> <label for=imagen class=form-label>Imagen (si necesitas cambiarla)</label> <input type=file class=form-control id=imagen name=imagenFile> </div> <button type=submit class="btn btn-primary">Guardar</button> <a class="btn btn-outline-secondary" th:href=@{/productos}>Volver</a> </form> <!-- <form th:action="@{/productos/editar}" method="POST" enctype="multipart/form-data">  <p class="mt-4 text-muted">* Todos los campos son obligatorios</p>    <input type="hidden" name="id" th:value="${producto.id}">    <div class="mb-3">  <label for="nombre" class="form-label">Nombre</label>  <input type="text" class="form-control" id="nombre" name="nombre" placeholder="Nombre del producto" th:value="${producto.nombre}" required autocomplete="off">  </div>    <div class="mb-3">  <label for="descripcion" class="form-label">Descripción</label>  <textarea class="form-control" placeholder="" id="descripcion" name="descripcion" style="height: 100px" th:text="${producto.descripcion}" required></textarea>  </div>    <div class="mb-3">  <label for="cantidad" class="form-label">Cantidad</label>  <input type="number" class="form-control" id="cantidad" name="cantidad" placeholder="1" min="1" th:value="${producto.cantidad}" required autocomplete="off">  </div>    <div class="mb-3">  <label for="precio" class="form-label">Precio</label>    <div class="input-group mb-3">  <span class="input-group-text">$</span>  <input type="number" class="form-control" id="precio" name="precio" step="0.1" min="0" th:value="${producto.precio}" required autocomplete="off">  </div>  </div>    <div class="mb-3">  <label for="imagen" class="form-label">Imagen</label>  <input type="file" class="form-control" id="imagen" name="imagenFile">  </div>    <button type="submit" class="btn btn-primary">Guardar</button>  <a class="btn btn-outline-secondary" th:href="@{/productos}">Volver</a>  </form> --> </main> <!-- content/ --> <div th:include=layout::footer> </div>
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\resources\templates\productos\index.html
<div th:include=layout::header> </div> <!-- content --> <main class=container> <h3 class=mt-4>Productos</h3> <a th:href=@{/productos/crear} class="btn btn-primary mt-3">Crear producto</a> <div th:if=${productos.isEmpty()}> <p class="text-center my-3">Aún no hay productos creados</p> </div> <div th:unless=${productos.isEmpty()}> <h2 class=mt-4>Productos</h2> <table class=table id=products-table> <thead> <tr> <th>Nombre</th> <th>Descripción</th> <th>Cantidad</th> <th>Precio</th> <th>Acción</th> </tr> </thead> <tbody> <tr th:each="producto: ${productos}"> <td th:text=${producto.nombre}></td> <td th:text="${#strings.abbreviate(producto.descripcion, 64)}"></td> <td th:text=${producto.cantidad}></td> <td th:text="'$' + ${#numbers.formatDecimal(producto.precio, 0, 'DEFAULT', 0, 'POINT')}"></td> <td class="d-flex gap-2"> <a th:href="@{/productos/editar/{id} (id = ${producto.id})}" class="btn btn-warning">Editar</a> <a th:href="@{/productos/eliminar/{id} (id = ${producto.id})}" class="btn btn-danger" id=btn-delete-product>Eliminar</a> </td> </tr> </tbody> </table> </div> </main> <!-- content/ --> <div th:include=layout::footer> </div>
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\resources\templates\public\carrito.html
<div th:include=layout::header> </div> <!-- content --> <main class=container> <h3 class=mt-4>Carrito</h3> <div class="card my-4"> <div class=card-body> <div th:if=${carrito.isEmpty()} class="my-4 text-center"> <p class="m-0 mb-2">Aún no hay productos añadidos al carrito</p> <a th:href=@{/} class="btn btn-primary">Explorar productos</a> </div> <table th:unless=${carrito.isEmpty()} class="mt-4 table table-bordered table-striped"> <thead> <tr> <th scope=col>Imagen</th> <th scope=col>Producto</th> <th scope=col>Cantidad</th> <th scope=col>Precio</th> <th scope=col>Accion</th> </tr> </thead> <tbody> <tr th:each="item: ${carrito}"> <td class=text-center> <img th:src="@{/images/{img} (img = ${item.producto.imagen})}" class=product-img-mini alt=producto> </td> <td th:text=${item.producto.nombre} class=fw-bold></td> <td th:text="${#numbers.formatDecimal(item.cantidad, 0, 'DEFAULT', 0, 'POINT')}"></td> <td th:text="'$ ' + ${#numbers.formatDecimal(item.producto.precio * item.cantidad, 0, 'DEFAULT', 0, 'POINT')}"></td> <!-- <td>(precio)</td> --> <td> <a th:href="@{/carrito-eliminar/{id} (id = ${item.producto.id})}" class="btn btn-outline-danger">Quitar</a> </td> </tr> <tr class=fs-3> <td></td> <td></td> <td></td> <td>Total</td> <td th:text="'$ ' + ${#numbers.formatDecimal(total, 0, 'DEFAULT', 0, 'POINT')}" class=text-end></td> <!-- <td th:text="'$ ' + ${#numbers.formatDecimal(orden.total, 0, 'DEFAULT', 0, 'POINT')}" class="text-end"></td> --> </tr> </tbody> </table> <div th:unless=${carrito.isEmpty()} class=text-end> <a th:href=@{/orden} class="btn btn-primary">Generar orden</a> </div> </div> </div> </main> <!-- content/ --> <div th:include=layout::footer> </div>
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\resources\templates\public\compra.html
<div th:include=layout::header> </div> <!-- content --> <main class=container> <h3 class=mt-4>Detalles de compra</h3> <div class="card my-4"> <div class=card-body> <table class=table id=products-table> <thead> <tr> <th></th> <!-- imagen --> <th>Producto</th> <th>Cantidad</th> <th>Total</th> <th>Fecha</th> <th></th> </tr> </thead> <tbody> <tr th:each="item: ${compra}"> <td> <img th:src="@{/images/{img} (img = ${compra.producto.imagen})}" alt=producto height=64px> </td> <td th:text=${item.producto.nombre}></td> <td th:text="${#numbers.formatDecimal(item.cantidad, 0, 'DEFAULT', 0, 'POINT')}"></td> <td th:text="'$ ' + ${#numbers.formatDecimal(item.producto.precio * item.cantidad, 0, 'DEFAULT', 0, 'POINT')}"></td> <td th:text=${item.fecha}></td> <td> <a th:href="@{/producto/{id} (id = ${item.producto.id})}" class="btn btn-primary">Ver producto</a> </td> </tr> </tbody> </table> </div> </div> </main> <!-- content/ --> <div th:include=layout::footer> </div>
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\resources\templates\public\compras.html
<div th:include=layout::header> </div> <!-- content --> <main class=container> <h3 class=mt-4>Compras</h3> <div class="card my-4"> <div class=card-body> <div th:if=${compras.isEmpty()} class="my-4 text-center"> <p class="m-0 mb-2">Aún no haz realizado compras</p> <a th:href=@{/} class="btn btn-primary">Explorar productos</a> </div> <table th:unless=${compras.isEmpty()} class=table id=products-table> <thead> <tr> <th>Fecha</th> <th><!-- Imagen --></th> <th>Producto</th> <th>Cantidad</th> <th>Total</th> <th>Accion</th> </tr> </thead> <tbody> <tr th:each="compra: ${compras}"> <td th:text=${compra.fecha}></td> <td class=text-center> <img th:src="@{/images/{img} (img = ${compra.producto.imagen})}" alt=producto height=64px> </td> <td th:text=${compra.producto.nombre}></td> <td th:text=${compra.cantidad}></td> <td th:text="'$ ' + ${#numbers.formatDecimal(compra.precio, 0, 'DEFAULT', 0, 'POINT')}"></td> <td> <a th:href="@{/compra/{id} (id = ${compra.id})}" class="btn btn-primary">Ver detalles</a> </td> </tr> </tbody> </table> </div> </div> </main> <!-- content/ --> <div th:include=layout::footer> </div>
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\resources\templates\public\index.html
<div th:include=layout::header> </div> <!-- content --> <main class=container> <div class="my-4 p-5 bg-light rounded-3"> <h1 class="display-5 fw-bold">Bienvenidos a Spring e-Commerce</h1> <p class="col-md-8 fs-4">Tu tienda de productos en línea</p> </div> </main> <section class=container> <!-- Sin productos --> <div th:if=${productos.isEmpty()}> <h2 th:if="${busqueda != null}" class="text-center my-4"> No hay resultados para la búsqueda '<span th:text=${busqueda}></span>'<br> Intenta con otro término. </h2> <h2 th:unless="${busqueda != null}" class="text-center my-4"> Aún no hay productos creados. </h2> </div> <!-- Con productos --> <div th:unless=${productos.isEmpty()} class="products my-4"> <div th:each="producto: ${productos}" class="product border rounded"> <!-- --> <a class="h-100 text-decoration-none text-black" th:href="@{/producto/{id} (id = ${producto.id})}"> <div class="p-2 border-bottom product-img-container"> <img th:src="@{/images/{img} (img = ${producto.imagen})}" class=product-img alt=producto> </div> <div class=p-2> <h4 class>$ <span th:text="${#numbers.formatDecimal(producto.precio, 0, 'DEFAULT', 0, 'POINT')}"></span></h4> <p th:text=${producto.nombre} class="m-0 text-muted product-title"></p> </div> </a> </div> </div> </section> <!-- content/ --> <div th:include=layout::footer> </div>
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\resources\templates\public\login.html
<!DOCTYPE html><html lang=es xmlns:th=http://www.thymeleaf.org> <head><title>E-commerce - Java Spring</title><meta charset=UTF-8><meta name=viewport content="width=device-width, initial-scale=1.0"><!-- CSS --><link href=https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css rel=stylesheet integrity=sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3 crossorigin=anonymous></head> <body> <header class="bg-dark py-3"> <div class="container d-flex align-items-center justify-content-between gap-4"> <div class="d-flex align-items-center gap-2"> <a th:href=@{/} class="fs-2 navbar-brand text-white">Spring eCommerce</a> </div> </div> </header> <!-- --> <main class="container-md my-4"> <h1 class="text-center mb-4">Iniciar sesión</h1> <p th:if=${signupRedirect_email} class=text-center>Registro completo! Inicia sesión con el email con el cual te registraste</p> <div class="py-3 px-4 card m-auto" style="width: 100%; max-width: 30rem;"> <div th:if=${param.error} class="mb-2 form-text text-danger">Correo electrónico o contraseña incorrectos.</div> <form th:action=@{/login} method=POST> <div class=mb-3> <label class=form-label for=email>Correo electrónico</label> <input class=form-control id=email type=email name=email required> </div> <div class=mb-3> <label class=form-label for=password>Contraseña</label> <input class=form-control id=password type=password name=password required> </div> <button type=submit class="my-2 btn btn-primary w-100">Iniciar sesión</button> <a th:href=@{/signup} class="btn btn-outline-success w-100">Regístrate!</a> </form> </div> </main>> <!-- --> <footer class="bg-dark text-white py-4"> <div class=container> <p class="m-0 text-center">Copyright &COPY; Spring eCommerce 2022</p> </div> </footer> <script src=https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js integrity=sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p crossorigin=anonymous></script> <script src=/app.js></script> </body> </html> 
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\resources\templates\public\orden.html
<div th:include=layout::header></div> <!-- content --> <main class=container> <h3 class=mt-4>Confirmar compra</h3> <div class="card my-4"> <div class="card-body p-4"> <div class=row> <div class=col-lg-9> <div class=mb-4> <h4 class="card-title text-uppercase">Datos del comprador</h4> <h6>Nombre: <span th:text="${usuario.nombre} + ' ' + ${usuario.apellido}"></span></h6> <h6>Correo: <span th:text=${usuario.email}></span></h6> <h6>Dirección: <span th:text=${usuario.direccion}></span></h6> </div> <h4 class="card-title text-uppercase mb-0">Compra</h4> <div class="alert alert-light" role=alert> <table class="table table-bordered"> <caption><span th:text=${cantidadProductos}></span> producto/s</caption> <thead> <tr> <th>Producto</th> <th>Cantidad</th> <th>Precio</th> </tr> </thead> <tbody> <tr th:each="item: ${carrito}"> <td th:text=${item.producto.nombre}></td> <td th:text="${#numbers.formatDecimal(item.cantidad, 0, 'DEFAULT', 0, 'POINT')}"></td> <td th:text="${#numbers.formatDecimal(item.producto.precio * item.cantidad, 0, 'DEFAULT', 0, 'POINT')}"></td> </tr> </tbody> </table> </div> </div> <div class=col-lg-3> <h4 class=card-title>Resumen</h4> <ul class="list-group my-2"> <li class=list-group-item> <p class=my-2>Total: <span th:text="'$ ' + ${#numbers.formatDecimal(total, 0, 'DEFAULT', 0, 'POINT')}" class=fw-bold></span></p> </li> </ul> <!-- Agrega el formulario de compra con Mercado Pago --> <form id=checkout-form action=/crear-orden method=POST> <!-- Agrega los campos necesarios, como nombre, precio, descripción, etc. --> <input type=hidden name=nombre value="Producto 1"> <input type=hidden name=precio value=10.00> <input type=hidden name=descripcion value="Descripción del producto 1"> <!-- Agrega el botón de compra --> <button type=submit class="mt-2 btn btn-primary w-100">Comprar con Mercado Pago</button> </form> </div> </div> </div> </div> </main> <!-- content/ --> <div th:include=layout::footer></div> 
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\resources\templates\public\producto.html
<div th:include=layout::header> </div> <!-- content --> <main class=container> <div class="card my-4"> <div class=card-body> <div class=row> <div class="col-lg-6 text-center"> <img th:src="@{/images/{img} (img = ${producto.imagen})}" alt=producto class=w-100 style="max-width: 30rem;"> </div> <div class=col-lg-6> <h2 class=card-title th:text=${producto.nombre}></h2> <form th:action=@{/carrito} method=POST> <input type=hidden name=id th:value=${producto.id}> <ul class=list-group> <li class=list-group-item> <p class="m-0 fs-3" th:text="'$ ' + ${#numbers.formatDecimal(producto.precio, 0, 'DEFAULT', 0, 'POINT')}"></p> </li> <li class=list-group-item> <p th:text=${producto.descripcion} class=text-pre-line></p> </li> <li class=list-group-item> <label for=cantidad class=form-label>Cantidad</label> <input type=number class=form-control id=cantidad name=cantidad min=1 value=1> </li> </ul> <button type=submit class="btn btn-primary w-100 mt-4">Añadir al carrito</button> </form> </div> </div> </div> </div> </main> <!-- content/ --> <div th:include=layout::footer></div>
----------------------------------------
Archivo: C:\Users\kevin\Desktop\ecommerce-spring-2023\src\main\resources\templates\public\signup.html
<!DOCTYPE html><html lang=es xmlns:th=http://www.thymeleaf.org> <head><title>E-commerce - Java Spring</title><meta charset=UTF-8><meta name=viewport content="width=device-width, initial-scale=1.0"><!-- CSS --><link href=https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css rel=stylesheet integrity=sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3 crossorigin=anonymous></head> <body> <header class="bg-dark py-3"> <div class="container d-flex align-items-center justify-content-between gap-4"> <div class="d-flex align-items-center gap-2"> <a th:href=@{/} class="fs-2 navbar-brand text-white">Spring eCommerce</a> </div> </div> </header> <!-- --> <main class="container-md my-4"> <h1 class="text-center mb-4">Registro</h1> <div class="py-3 px-4 card m-auto" style="width: 100%; max-width: 30rem;"> <form th:action=@{/signup} method=POST th:object=${usuario}> <p class="mb-4 small text-muted">* Requerido</p> <div class="form mb-3"> <label class=form-label for=nombre>Nombre *</label> <input class=form-control id=nombre type=text th:field=*{nombre} required> <small class="form-text text-danger" th:errors=*{nombre}></small> </div> <div class="form mb-3"> <label class=form-label for=apellido>Apellido *</label> <input class=form-control id=apellido type=text th:field=*{apellido} required> <small class="form-text text-danger" th:errors=*{apellido}></small> </div> <div class="form mb-3"> <label class=form-label for=email>Email *</label> <input class=form-control id=email type=email th:field=*{email} required> <small class="form-text text-danger" th:errors=*{email}></small> <small th:if=${error_emailExists} class="form-text text-danger">Este email ya está registrado, ¿quieres <a th:href=@{/login}>iniciar sesión</a>?</small> </div> <div class="form mb-3"> <label class=form-label for=password>Contraseña *</label> <input class=form-control id=password type=password th:field=*{password} required> <small class="form-text text-danger" th:errors=*{password}></small> </div> <div class="form mb-3"> <label class=form-label for=telefono>Número de teléfono</label> <input class=form-control id=telefono type=text th:field=*{telefono}> <small class="form-text text-danger" th:errors=*{telefono}></small> </div> <div class="form mb-3"> <label class=form-label for=direccion>Dirección</label> <input class=form-control id=direccion type=text th:field=*{direccion}> <small class="form-text text-danger" th:errors=*{direccion}></small> </div> <button type=submit class="my-2 btn btn-success w-100">Crear cuenta</button> <a th:href=@{/login} class="btn btn-outline-primary w-100">Iniciar sesión</a> </form> <!-- <form th:action="@{/signup}" method="POST">  <div class="mb-3">  <label for="nombre" class="form-label">Nombre</label>  <input th:if="${nombre}" type="text" class="form-control" id="nombre" name="nombre" th:value="${nombre}" required>  <input th:unless="${nombre}" type="text" class="form-control" id="nombre" name="nombre" required>  </div>  <div class="mb-3">  <label for="apellido" class="form-label">Apellido</label>  <input th:if="${nombre}" type="text" class="form-control" id="apellido" name="apellido" th:value="${apellido}" required>  <input th:unless="${nombre}" type="text" class="form-control" id="apellido" name="apellido" required>  </div>  <div class="mb-3">  <label for="email" class="form-label">Email</label>  <input th:if="${email}" type="email" class="form-control" id="email" name="email" th:value="${email}" required>  <input th:unless="${email}" type="email" class="form-control" id="email" name="email" required>  <div th:if="${error_email}" class="form-text text-danger">Este correo electrónico ya está registrado, ¿deseas <a th:href="@{/login}">iniciar sesión</a>?</div>  </div>  <div class="mb-3">  <label for="password" class="form-label">Contraseña</label>  <input type="password" class="form-control" id="password" name="password" required>  </div>  <div class="mb-3">  <label for="direccion" class="form-label">Dirección</label>  <input th:if="${direccion}" th:value=${direccion} type="text" class="form-control" id="direccion" name="direccion" required>  <input th:unless="${direccion}" type="text" class="form-control" id="direccion" name="direccion" required>  </div>    <button type="submit" class="my-2 btn btn-success w-100">Crear cuenta</button>  <a th:href="@{/login}" class="btn btn-outline-primary w-100">Iniciar sesión</a>  </form> --> </div> </main>> <!-- --> <footer class="bg-dark text-white py-4"> <div class=container> <p class="m-0 text-center">Copyright &COPY; Spring eCommerce 2022</p> </div> </footer> <script src=https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js integrity=sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p crossorigin=anonymous></script> <script src=/app.js></script> </body> </html> 
----------------------------------------
